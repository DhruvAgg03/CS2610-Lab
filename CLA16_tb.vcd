$date
	Mon Feb 06 15:16:37 2023
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module CLA16_tb $end
$var wire 16 ! res [15:0] $end
$var wire 1 " ovflow $end
$var reg 16 # A [15:0] $end
$var reg 16 $ B [15:0] $end
$var reg 1 % sign $end
$var reg 1 & subtract $end
$scope module __C $end
$var wire 1 " OF $end
$var wire 1 & add $end
$var wire 1 ' mint1 $end
$var wire 1 ( mint2 $end
$var wire 1 ) o1 $end
$var wire 1 * o2 $end
$var wire 16 + operand1 [15:0] $end
$var wire 16 , operand2 [15:0] $end
$var wire 16 - operand2_bar [15:0] $end
$var wire 1 % sign $end
$var wire 1 . sign_bar $end
$var wire 16 / result [15:0] $end
$var wire 4 0 carries [3:0] $end
$var wire 4 1 c2l [3:0] $end
$scope module c1 $end
$var wire 4 2 A [3:0] $end
$var wire 4 3 B [3:0] $end
$var wire 1 4 C2L $end
$var wire 1 & Cin $end
$var wire 1 5 carry $end
$var wire 4 6 g [3:0] $end
$var wire 4 7 p [3:0] $end
$var wire 1 8 p0c0 $end
$var wire 1 9 p1g0 $end
$var wire 1 : p1p0c0 $end
$var wire 1 ; p2g1 $end
$var wire 1 < p2p1g0 $end
$var wire 1 = p2p1p0c0 $end
$var wire 1 > p3g2 $end
$var wire 1 ? p3p2g1 $end
$var wire 1 @ p3p2p1g0 $end
$var wire 1 A p3p2p1p0c0 $end
$var wire 4 B sum [3:0] $end
$var wire 4 C c [3:0] $end
$upscope $end
$scope module c2 $end
$var wire 4 D A [3:0] $end
$var wire 4 E B [3:0] $end
$var wire 1 F C2L $end
$var wire 1 G Cin $end
$var wire 1 H carry $end
$var wire 4 I g [3:0] $end
$var wire 4 J p [3:0] $end
$var wire 1 K p0c0 $end
$var wire 1 L p1g0 $end
$var wire 1 M p1p0c0 $end
$var wire 1 N p2g1 $end
$var wire 1 O p2p1g0 $end
$var wire 1 P p2p1p0c0 $end
$var wire 1 Q p3g2 $end
$var wire 1 R p3p2g1 $end
$var wire 1 S p3p2p1g0 $end
$var wire 1 T p3p2p1p0c0 $end
$var wire 4 U sum [3:0] $end
$var wire 4 V c [3:0] $end
$upscope $end
$scope module c3 $end
$var wire 4 W A [3:0] $end
$var wire 4 X B [3:0] $end
$var wire 1 Y C2L $end
$var wire 1 Z Cin $end
$var wire 1 [ carry $end
$var wire 4 \ g [3:0] $end
$var wire 4 ] p [3:0] $end
$var wire 1 ^ p0c0 $end
$var wire 1 _ p1g0 $end
$var wire 1 ` p1p0c0 $end
$var wire 1 a p2g1 $end
$var wire 1 b p2p1g0 $end
$var wire 1 c p2p1p0c0 $end
$var wire 1 d p3g2 $end
$var wire 1 e p3p2g1 $end
$var wire 1 f p3p2p1g0 $end
$var wire 1 g p3p2p1p0c0 $end
$var wire 4 h sum [3:0] $end
$var wire 4 i c [3:0] $end
$upscope $end
$scope module c4 $end
$var wire 4 j A [3:0] $end
$var wire 4 k B [3:0] $end
$var wire 1 l C2L $end
$var wire 1 m Cin $end
$var wire 1 n carry $end
$var wire 4 o g [3:0] $end
$var wire 4 p p [3:0] $end
$var wire 1 q p0c0 $end
$var wire 1 r p1g0 $end
$var wire 1 s p1p0c0 $end
$var wire 1 t p2g1 $end
$var wire 1 u p2p1g0 $end
$var wire 1 v p2p1p0c0 $end
$var wire 1 w p3g2 $end
$var wire 1 x p3p2g1 $end
$var wire 1 y p3p2p1g0 $end
$var wire 1 z p3p2p1p0c0 $end
$var wire 4 { sum [3:0] $end
$var wire 4 | c [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b0 |
b0 {
0z
0y
0x
0w
0v
0u
0t
0s
0r
0q
b0 p
b0 o
0n
0m
0l
b0 k
b0 j
b110 i
b100 h
0g
0f
0e
0d
0c
0b
0a
0`
1_
0^
b10 ]
b1 \
0[
0Z
0Y
b11 X
b1 W
b0 V
b110 U
0T
0S
0R
0Q
0P
0O
0N
0M
0L
0K
b110 J
b0 I
0H
0G
0F
b100 E
b10 D
b1110 C
b1000 B
0A
0@
0?
0>
0=
1<
0;
0:
19
08
b110 7
b1 6
05
14
b101 3
b11 2
b1 1
b0 0
b10001101000 /
1.
b1111110010111010 -
b1101000101 ,
b100100011 +
0*
0)
0(
0'
0&
0%
b1101000101 $
b100100011 #
0"
b10001101000 !
$end
#200
1"
1'
1)
0*
b1001 1
1l
b1000 0
1n
b1110 |
1r
1u
1y
b10001101000 !
b10001101000 /
b0 {
b1 o
b1110 p
b1110110010111010 -
b1 k
b1111 j
b1001101000101 $
b1001101000101 ,
b1111000100100011 #
b1111000100100011 +
#400
b10001101001 !
b10001101001 /
b1001 B
b1111 C
1&
#600
0"
0'
0)
0*
b1 1
0l
b0 0
0n
b0 |
0r
0u
0y
b0 {
b10001101000 !
b10001101000 /
b1000 B
b0 o
b0 p
b1110 C
b1111110010111010 -
b0 k
b0 j
0&
b1101000101 $
b1101000101 ,
b100100011 #
b100100011 +
#800
1*
b1001 1
1l
b1110010001101000 !
b1110010001101000 /
b1110 {
b1110 |
b111 o
b1000110010111010 -
b111 k
b111 j
b111001101000101 $
b111001101000101 ,
b111000100100011 #
b111000100100011 +
#1000
1"
1'
1)
1*
b1 1
0l
b100010001101000 !
b100010001101000 /
b100 {
b1000 0
1n
b100 |
b1010 o
b101110010111010 -
b1010 k
b1010 j
b1010001101000101 $
b1010001101000101 ,
b1010000100100011 #
b1010000100100011 +
#1200
0*
b1001 1
1l
b1110010001101000 !
b1110010001101000 /
b1110 {
b1110 |
b1111 o
b110010111010 -
b1111 k
b1111 j
b1111001101000101 $
b1111001101000101 ,
b1111000100100011 #
b1111000100100011 +
#1400
1r
1u
1y
b10001101000 !
b10001101000 /
b0 {
b1 o
b1110 p
b1110110010111010 -
b1 k
b1001101000101 $
b1001101000101 ,
#1600
0"
0'
0)
0*
b1 1
0l
b0 0
0n
b0 |
0r
0u
0y
b11010001101000 !
b11010001101000 /
b11 {
b0 o
b11 p
b10 j
b10000100100011 #
b10000100100011 +
#1800
1"
1'
1)
0*
b1001 1
1l
b1000 0
1n
b1100 |
1t
1x
b1010001101000 !
b1010001101000 /
b1 {
b10 o
b1101 p
b110010111010 -
b1111 k
b1111001101000101 $
b1111001101000101 ,
#2000
